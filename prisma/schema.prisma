generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  role               UserRole
  status             UserStatus     @default(ACTIVE)
  needPasswordChange Boolean        @default(false)
  // isDeleted          Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  admin              Admin?
  vendor             Vendor?
  customer           Customer?
  suspendedUser      SuspendedUser?

  @@map("users")
}

model Admin {
  id                     String     @id @default(uuid())
  userId                 String     @unique
  name                   String
  email                  String     @unique
  contactNumber          String
  emergencyContactNumber String
  gender                 Gender
  profileImg             String?
  address                String
  status                 UserStatus @default(ACTIVE)
  // isDeleted              Boolean  @default(false)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  user                   User       @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Vendor {
  id                     String     @id @default(uuid())
  userId                 String     @unique
  name                   String
  email                  String     @unique
  contactNumber          String
  emergencyContactNumber String
  gender                 Gender
  profileImg             String?
  address                String
  status                 UserStatus @default(ACTIVE)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  user                   User       @relation(fields: [userId], references: [id])
  shop                   Shop?

  @@map("vendors")
}

model Customer {
  id                     String     @id @default(uuid())
  userId                 String     @unique
  name                   String
  email                  String
  contactNumber          String
  emergencyContactNumber String
  gender                 Gender
  profileImg             String?
  address                String
  // isDeleted              Boolean  @default(false)
  status                 UserStatus @default(ACTIVE)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  user                   User       @relation(fields: [userId], references: [id])

  @@map("customers")
}

model SuspendedUser {
  id        String   @id @default(uuid())
  userId    String   @unique
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("suspended_users")
}

model MainCategory {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]

  @@map("main_categories")
}

model SubCategory {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isDeleted      Boolean        @default(false)
  mainCategoryId String
  mainCategory   MainCategory   @relation(fields: [mainCategoryId], references: [id])
  itemCategories ItemCategory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([name, mainCategoryId])
  @@map("sub_categories")
}

model ItemCategory {
  id            String      @id @default(uuid())
  name          String      @unique
  description   String?
  isDeleted     Boolean     @default(false)
  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  products      Product[]

  @@unique([name, subCategoryId])
  @@map("item_categories")
}

model Shop {
  id                String     @id @default(uuid())
  name              String     @unique
  logo              String?
  description       String?
  email             String     @unique
  contactNumber     String
  status            ShopStatus @default(ACTIVE)
  isVerified        Boolean    @default(false)
  isDeleted         Boolean    @default(false)
  isTemporaryDelete Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  vendorId          String     @unique
  vendor            Vendor     @relation(fields: [vendorId], references: [id])
  products          Product[]

  @@map("shops")
}

model Product {
  id               String         @id @default(uuid())
  sku              String         @unique
  name             String
  description      String?
  price            Float
  stockQuantity    Int
  discountPercent  Float?
  brand            String
  itemCategoryId   String
  shopId           String
  isFlashSale      Boolean        @default(false)
  flashSaleEndTime DateTime?
  shippingMethods  ShippingMethod
  shippingCharge   Float?
  status           ProductStatus  @default(ACTIVE)
  variants         Variant[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  shop             Shop           @relation(fields: [shopId], references: [id])
  itemCategory     ItemCategory   @relation(fields: [itemCategoryId], references: [id])

  @@map("products")
}

model Variant {
  id        String   @id @default(uuid())
  color     String?
  images    String[]
  sizes     String[] @default([])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("variants")
}

enum ShippingMethod {
  FREE_SHIPPING
  SUNDARBAN_COURIER
  REDX
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  SUSPENDED
  DELETED
}
